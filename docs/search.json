[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math 218: Spring 2023",
    "section": "",
    "text": "Warner 104, TRF 8:40-9:25AM Eastern\nProfessor Becky Tang\n\nOffice: Warner 214\nOffice hours: TBD\n\n\nVisit the schedule page to see the current course schedule, lecture notes, and due dates.\nVisit the assignments page to see the current list of assignments."
  },
  {
    "objectID": "index.html#materials",
    "href": "index.html#materials",
    "title": "Math 218: Spring 2023",
    "section": "Materials",
    "text": "Materials\nThere is no required textbook for this course.\nYou should have a fully-charged laptop, tablet with keyboard, or comparable device to every lecture and lab session.\nYou should also have R and RStudio installed on your machine. If you do not have either, please follow these instructions."
  },
  {
    "objectID": "index.html#syllabus",
    "href": "index.html#syllabus",
    "title": "Math 218: Spring 2023",
    "section": "Syllabus",
    "text": "Syllabus\nForthcoming"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Intro to base R\n\n\n\nFeb 14, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nImportant coding skills\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignments.html#labs",
    "href": "assignments.html#labs",
    "title": "Assignments",
    "section": "Labs",
    "text": "Labs\n\n\n\n\n\n\n\nLab 01: Roulette\n\n\nCoding roulette\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignments.html#implementations",
    "href": "assignments.html#implementations",
    "title": "Assignments",
    "section": "Implementations",
    "text": "Implementations\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "live-code-2.html",
    "href": "live-code-2.html",
    "title": "Live code 2",
    "section": "",
    "text": "We will continue working in base R, and begin learning about conditional statements and for loops!"
  },
  {
    "objectID": "live-code-2.html#new-functions",
    "href": "live-code-2.html#new-functions",
    "title": "Live code 2",
    "section": "New functions:",
    "text": "New functions:\n\nThe %in% function helps determine if a value is contained in a vector:\n\n5 %in% 1:5\n\n[1] TRUE\n\n0 %in% c(1,3,5)\n\n[1] FALSE\n\n\n\nNote: we could obtain the same sort of information using a few lines of code from functions learned previously! How do you think we could do that?\n\n\nCode\n5 == 1:5\nsum(5 == 1:5)\n\nsum(0 == c(1,3,5))\n\n\n\nThe sample(vec, m) function takes a random sample of size m from the vector vec . By default, we sample without replacement and each value in vec is equally likely. For example, I can draw one value between 1-5 at random as follows:\n\nsample(1:5, 1)\n\n[1] 4\n\nsample(1:5, 1)\n\n[1] 4\n\nsample(1:5, 1)\n\n[1] 5\n\n\n\nAs you see, running this code multiple times will lead to different values being sample-d!"
  },
  {
    "objectID": "live-code-2.html#conditional-statements",
    "href": "live-code-2.html#conditional-statements",
    "title": "Live code 2",
    "section": "Conditional statements",
    "text": "Conditional statements\nThus far, we have learned how to store values and relate different R objects. For example, we can obtain a boolean TRUE or FALSE value when we compare two objects as follows:\n\nx <- 3\nx <= 5\n\n[1] TRUE\n\n\nMost often, we want to use the results from these logical operators to change the behavior of our code. That is, if a certain condition is satisfied, we want our code to do something. Else, our code should do something else.\n\nif statements\nThe if statement takes in a condition. If the condition evaluates to TRUE, then the R code we associate with the if statement is executed. The syntax is as follows:\n\nif (condition){\n  code\n}\n\nNotice that the condition goes in parentheses ( ), and the relevant code goes within curly braces { }.\nFor example:\n\nif (x < 5){\n  print(\"x is less than 5\")\n}\n\nTry this yourself! Set x to be a number, then run this code. If you chose x to be greater than or equal to 5, then the condition evaluates to FALSE and so we do not run the code within the curly braces and nothing is printed.\n\n\nelse statements\nNow, maybe we want to a different block of code to run if the condition evaluates to FALSE. This is where the else statement comes in! Importantly, else statements always follows an if statement so there is no need to supply a conditional statement. The syntax is as follows:\n\nif (condition){\n  code associated with TRUE condition\n} else{\n  code associated with FALSE condition\n}\n\nTry modifying the if statement above to have a corresponding block of code that corrently prints when x is greater than or equal to 5."
  },
  {
    "objectID": "live-code-2.html#for-loops",
    "href": "live-code-2.html#for-loops",
    "title": "Live code 2",
    "section": "for loops",
    "text": "for loops\nIt is quite simple to perform repetitive tasks in R. If we want to execute the same operations over and over again, we will use a loop. If we want to repeat the operations for a specific number of times, we use a for loop.\nLet’s look at this code:\n\nfor(i in 1:5){\n  print(i)\n}\n\nThe for() code is telling R that we want to run a for loop, which means we want to repeat the code within the curly braces. How many times do we want to repeat? The code says we want to do this for every value in 1:5.\nThe confusing part is the index i, which is essentially a placeholder. Instead of i, we could use any character we’d like! However, people tend to use i for “iteration”. At the beginning, i is set to the first value in the vector 1:5, (i.e. i = 1 to begin with). All the code within the braces are executed with i = 1 being the state of the world. Once we reach the end of the code within the braces, we go back to the top and set i = 2. We continue to do this until the last value in 1:5, which would be 5.\n\nfor(i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5"
  },
  {
    "objectID": "live-code-2.html#your-turn",
    "href": "live-code-2.html#your-turn",
    "title": "Live code 2",
    "section": "Your turn!",
    "text": "Your turn!\n\nWrite code that outputs the square root of a number. If the number is negative, then print out an informative statement instead. Note: the square root of a number can be obtained via the sqrt() function.\nWrite a for loop that calculates the factorial of a whole number of your choice. As a quick refresher, 5! (which we read as “5 factorial”) is equal to 5 x 4 x 3 x 2 x 1.\nObtain a vector y of 5 values by using the sample function, where the possible values to sample from are integers ranging between 1 and 5. Here, I want you to sample with replacement. Write a for loop that loops for 5 iterations and print the number of elements in y equal to the current iteration. If the current iteration value is not contained in y, please print out a useful statement for the user instead."
  },
  {
    "objectID": "live-code-1.html",
    "href": "live-code-1.html",
    "title": "Live code 1",
    "section": "",
    "text": "This lab is intended to re-familiarize yourself with R and RStudio, as well as begin practicing to code in base R. You will need the tidyverse package."
  },
  {
    "objectID": "live-code-1.html#vectors",
    "href": "live-code-1.html#vectors",
    "title": "Live code 1",
    "section": "Vectors",
    "text": "Vectors\nIn R, a vector is a data structure that holds or stores elements of the same type. Type may be numeric, integer, character, boolean, etc.\n\nThe c() function\nGenerally, we create vectors using the c() function and then save the vector into a variable. In the code below, I create a vector of three values (10, 11, and 12), and save the results into v:\n\nv <- c(10, 11, 12)\n\n\n\nThe : operator\nNow, sometimes it’s really useful to create a vector of consecutive numbers, for example, the values 1 through 10. Rather than type out every number explicitly and wrap it in c() , I can use the : operator, which looks like a:b where a and b are integers of your choosing. If a < b, R will then create a vector of numbers a, a+1, a+2,…, b-1, b .\n\nx <- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nWhat do you think happens if a > b? Try the following code for yourself:\n\ny <- -10:-1\n\n\n\nThe rep() function\nOne function that I personally use a lot to create vectors is the rep(a,b) function, which takes in two argument. The first is the value a you wish to repeat, and the second argument is the number of times b you’d like to repeat it. How would we create a vector of 20 0’s? Think about it, and check:\n\n\nCode\nrep(0, 20)"
  },
  {
    "objectID": "live-code-1.html#matrices",
    "href": "live-code-1.html#matrices",
    "title": "Live code 1",
    "section": "Matrices",
    "text": "Matrices\nMatrices are the 2D extension of the one-dimensional vectors. When a matrix has n rows and p columns, we denote its dimensions as n x p or “n by p”. We create matrices using the matrix() function. Because of the multiple dimensions, we need to specify the number of rows and the number of columns:\n\nmatrix(NA, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\n\nThis code above creates a 2 x 3 matrix of NA values. The first argument takes in the elements you want to fill the matrix with. This can either by a single value, or a single vector of values."
  },
  {
    "objectID": "live-code-1.html#data-frames",
    "href": "live-code-1.html#data-frames",
    "title": "Live code 1",
    "section": "Data frames",
    "text": "Data frames\nWe will create a data frame called my_df here, which holds the two vectors we created before.\n\nmy_df <- data.frame(xvar = x, yvar = y)\n\nNow, if I wanted to only take the variable xvar from my_df, how would I do so using dplyr functions? Take a second to think about it, then check:\n\n\nCode\nmy_df %>%\n  select(xvar)\n\n\nWe will now use base R to access that xvar variable by using $ notation: <df>$<var_name> . If you do this yourself, you should notice that immediately after typing the $ , a menu pops up with all the variables contained in the data frame.\n\nmy_df$xvar\n\nNow, do you notice the difference between the two outputs?\n\nmy_df %>%\n  select(xvar)\n\n   xvar\n1     1\n2     2\n3     3\n4     4\n5     5\n6     6\n7     7\n8     8\n9     9\n10   10\n\nmy_df$xvar\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "live-code-1.html#indexing",
    "href": "live-code-1.html#indexing",
    "title": "Live code 1",
    "section": "Indexing",
    "text": "Indexing\nOne of the most useful tools we will use is indexing and index notation.\nAn index is essentially a numerical representation of an item’s position in a list or vector. It is typically an integer, starting from either 0 or 1 depending on the programming language. In R, our index positions always start at 1!\nFor example, in the word “learning”, the l is at index 1. Similarly, in our vector v of the numbers \\((10, 11, 12)\\), the value at index 1 is 10. We can confirm this with code:\n\nv[1]\n\n[1] 10\n\n\nNotice that we access the item held in index 1 using the square bracket notation [ ]\nNow, I can also replace or modify an element at a given index. I will still access the location using [ ], but now I will store/save the new value:\n\nv[1] <- 13\nv\n\n[1] 13 11 12\n\n\nWe can also modify multiple elements at once by passing in a vector of indices to modify, as well as a vector of new values:\n\nv[2:3] <- c(14, 15)\n\nWhat does v look like now?\nWe can also use indices to refer to elements or entire rows and columns of data frames! Unlike vectors, data frame are two-dimensional, i.e. there are both rows and columns. Thus, our index notation will need to adapt to accommodate this feature. We will still use [ ] notation, but now commas will be introduced:\n\nmy_df[1,2]\n\n[1] -10\n\n\nBased on my_df, what do you think the [1,2] means?\nNow, we already saw how to access a column of a data frame using the $ notation, but we can also use index notation. To access the first column, we would type:\n\nmy_df[,1]\n\nThe 1 after the comma tells R that we want to focus on column 1.\nAs do not type anything before the comma, R reads this as: “since you did not want a specific row, so you must want all the rows”.\nHow do you think we would access the third row? How about both the first and second row?"
  },
  {
    "objectID": "live-code-1.html#functions",
    "href": "live-code-1.html#functions",
    "title": "Live code 1",
    "section": "Functions",
    "text": "Functions\nThere are a lot of simple functions in R that we will rely on. We already saw c() and rep(). Most of the functions we will use take in a vector or matrix of numeric values, and return either a single number or vector in return.\nThe function mean() takes in a vector, and returns the mean of the vector.\n\nmean(x)\n\n[1] 5.5\n\n\nThe function length() takes in a vector, and returns the number of element of the vector:\n\nlength(x)\n\n[1] 10\n\n\nThe functions max() and min() return what you would expect them to!\nAn extremely useful function we will use is the which() function. Unlike the previous functions, which() does not take in a numeric vector. Rather, it takes a vector of boolean values (i.e. TRUE/FALSE values). Then, it returns the indices of the TRUE values in the vector. For example, an input might be:\n\ny == -5\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n\nThis is comparing each value in y to see if it equals -5. Notice that only one value evaluates to TRUE, specifically the element in index 6. Therefore, if we wrap the which() function around that argument, we should get 6 in return:\n\nwhich(y == -5)\n\n[1] 6\n\n\nPersonally, I tend to read this line of code as a question: Which element(s) of y are exactly equal to -5?\nWe know that y only holds negative values. What do you think happens if we try to evaluate the following. Try it yourself!\n\nwhich(y == 0)\n\nIt’s also entirely possible that many values in the boolean vector are true, in which case the function would return multiple indices. For example, if I want to know which values in y are negative, I could code:\n\nwhich(y < 0)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\nIndexing with boolean vectors\nAbove, we saw how to access elements held at specific indices of interest. We can also use boolean vectors to return values. Recall our vector v:\n\nv\n\n[1] 13 14 15\n\n\nI can index v by indexing using TRUE’s for each value that I want, and FALSE’s otherwise.\n\nv[c(F, T, F)]\n\n[1] 14"
  },
  {
    "objectID": "live-code-1.html#your-turn",
    "href": "live-code-1.html#your-turn",
    "title": "Live code 1",
    "section": "Your turn!",
    "text": "Your turn!\nPlease complete the following exercises in order:\n\nCreate a vector called my_vec that holds the values 50 through 100.\nCreate a new vector called less60 where an element is TRUE if the corresponding element in my_vec is less than 60, and FALSE otherwise.\nConfirm that the length of your two vectors are the same.\nPass less60 into the function sum() function. Relate the value obtained to the elements of less60.\nModify my_vec such that the value at index 10 is 100.\nObtain the index of the maximum values of my_vec using functions described above.\nNow, pass my_vec into the which.max() function. Even though we haven’t seen it before, based on the function name, the name of the function is intuitive. Does the result from which.max() differ from what you obtained in Ex. 6? How so?\nCreate a 2 x 5 matrix of the values 1 through 10, where the first row holds the values 1-5, and the second row holds the values 6-10. Hint: look at the help file for matrix."
  },
  {
    "objectID": "slides-01-what-is.html#necessary-background",
    "href": "slides-01-what-is.html#necessary-background",
    "title": "What is statistical learning?",
    "section": "Necessary background",
    "text": "Necessary background\n\nI assume you have taken Math 118 prior to this course, and are comfortable with tidyverse and RStudio. There is a large emphasis on computing.\nWe will learn how to code in base R, and by the end of the course you should feel comfortable switching between base R and tidyverse.\nWe will focus more on applications and developing intuition. The goal is to develop a toolbox of methods that you may use in future analyses."
  },
  {
    "objectID": "slides-01-what-is.html#your-turn",
    "href": "slides-01-what-is.html#your-turn",
    "title": "What is statistical learning?",
    "section": "Your Turn!",
    "text": "Your Turn!"
  },
  {
    "objectID": "slides-01-what-is.html#create-a-github-account",
    "href": "slides-01-what-is.html#create-a-github-account",
    "title": "What is statistical learning?",
    "section": "Create a GitHub account",
    "text": "Create a GitHub account\n\nGo to https://github.com/, and create an account (unless you already have one). After you create your account, click here and enter your GitHub username.\n\nTips for creating a username from Happy Git with R.\n\nIncorporate your actual name!\nReuse your username from other contexts if you can.\nPick a username you will be comfortable revealing to your future boss.\nShorter is better than longer.\nBe as unique as possible in as few characters as possible.\nMake it timeless.\nAvoid words laden with special meaning in programming, like NA.\n\n\nRaise your hand if you have any questions."
  },
  {
    "objectID": "lab-01-roulette.html",
    "href": "lab-01-roulette.html",
    "title": "Lab 01: Roulette",
    "section": "",
    "text": "We will simulate the casino game of American roulette! On an American roulette wheel, there are 38 equally-sized spaces that differ in color and number value:\n\nTwo spaces are green, and are labelled 0 and 00\nThe remaining spaces alternate red and black and take on the values 1-36\n\nThere is no particular order to the numbers\n\n\nThe game is simple: a ball is dropped and spins along the roulette until it settles in one of the 38 spaces. Each space has an equal chance of being landed on.\n\n\n\n\n\nDiffering wagers or bets can be made on where the ball will end up landing. For example, it is common to bet on a color. If you “bet on black”, you think the ball will land in a black-colored space. Or you might “bet on 1-18”, which means you think the ball will land in a space with a number between 1 and 18, inclusive.\nYou wager some money when you make a bet. For example, if I bet $5 and I win, I will get my original $5 back and also gain $5 from the house. So I net $5. If I lose, then the house takes my $5 and I net -$5. In summary:\n\nIf I win, I net the amount that I bet\nIf I lose, I net the negative amount that I bet\n\nIn either case, your net gain will be either positive or negative.\nBecause this is a casino game, we know that the house always wins. So, the purpose of this assignment is to simulate/demonstrate that the player will always lose money in the long run."
  },
  {
    "objectID": "lab-01-roulette.html#assignment",
    "href": "lab-01-roulette.html#assignment",
    "title": "Lab 01: Roulette",
    "section": "Assignment",
    "text": "Assignment\nImagine that you have unlimited funds and will play roulette n number of times. You will always bet on red and wager the same amount of money. For each one of the n rounds, keep track of the net gain. At the end of your gambling, make a plot showing the cumulative gains over the n iterations. That is, make a plot with 1, 2, …, n on the x-axis. The y-coordinate associated with each x-coordinate is the total/net gains up to that point.\n\nDetails\nAssume that the red spaces take on the values (2, 4, 6, …, 34, 36) and the black spaces take on the values (1, 3, 4, …, 35). You can decide how you would like to represent the two green spaces.\nHere is some structure that might help you design your code: you will need to create a for loop where on every iteration you should:\n\n“Spin” the roulette\nEvaluate how the outcome of your spin compares to your bet\nMake note of the net gain\n\nTo create the final plot, consider making a data frame that has two columns: one for the iterations, and another for the cumulative net gains.\n\n\nConcepts used\n\nfor loops\nConditional statements\nComparing R objects\nCreating and modifying vectors"
  },
  {
    "objectID": "lab-01-roulette.html#submission-details",
    "href": "lab-01-roulette.html#submission-details",
    "title": "Lab 01: Roulette",
    "section": "Submission details",
    "text": "Submission details\nTBD"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Date\nContent & Materials\nDue dates\n\n\n\n\n\n\nWEEK 1\n\n\n\n\nT 2/14\nWelcome!\n\nClass introduction and intro to base R\n\n\n\n\nR 2/16\nWhat is statistical learning?\n\n\n\nF 2/17\nLab day\n\nMore advanced coding\nLab 01: Roulette\n\n\n\n\n\n\nWEEK 2\n\n\n\n\nT 2/21\n\n\n\n\nR 2/23"
  },
  {
    "objectID": "slides-01-what-is.html#course-policies",
    "href": "slides-01-what-is.html#course-policies",
    "title": "What is statistical learning?",
    "section": "Course Policies",
    "text": "Course Policies"
  },
  {
    "objectID": "slides-00-welcome.html#necessary-background",
    "href": "slides-00-welcome.html#necessary-background",
    "title": "Welcome to statistical learning!",
    "section": "Necessary background",
    "text": "Necessary background\n\nI assume you have taken Math 118 prior to this course, and are comfortable with tidyverse and RStudio. There is a large emphasis on computing.\nWe will learn how to code in base R, and by the end of the course you should feel comfortable switching between base R and tidyverse.\nWe will focus more on applications and developing intuition. The goal is to develop a toolbox of methods that you may use in future analyses."
  },
  {
    "objectID": "slides-00-welcome.html#your-turn",
    "href": "slides-00-welcome.html#your-turn",
    "title": "Welcome to statistical learning!",
    "section": "Your Turn!",
    "text": "Your Turn!"
  },
  {
    "objectID": "slides-00-welcome.html#create-a-github-account",
    "href": "slides-00-welcome.html#create-a-github-account",
    "title": "Welcome to statistical learning!",
    "section": "Create a GitHub account",
    "text": "Create a GitHub account\n\nGo to https://github.com/, and create an account (unless you already have one). After you create your account, click here and enter your GitHub username.\n\nTips for creating a username from Happy Git with R.\n\nIncorporate your actual name!\nReuse your username from other contexts if you can.\nShorter is better than longer; be as unique as possible in as few characters as possible.\nAvoid words laden with special meaning in programming, like NA."
  },
  {
    "objectID": "slides-00-welcome.html#course-policies",
    "href": "slides-00-welcome.html#course-policies",
    "title": "Welcome to statistical learning!",
    "section": "Course Policies",
    "text": "Course Policies"
  },
  {
    "objectID": "slides-00-welcome.knit.html#necessary-background",
    "href": "slides-00-welcome.knit.html#necessary-background",
    "title": "Welcome to statistical learning!",
    "section": "Necessary background",
    "text": "Necessary background\n\nI assume you have taken Math 118 prior to this course, and are comfortable with tidyverse and RStudio. There is a large emphasis on computing.\nWe will learn how to code in base R, and by the end of the course you should feel comfortable switching between base R and tidyverse.\nWe will focus more on applications and developing intuition. The goal is to develop a toolbox of methods that you may use in future analyses."
  },
  {
    "objectID": "slides-00-welcome.knit.html#your-turn",
    "href": "slides-00-welcome.knit.html#your-turn",
    "title": "Welcome to statistical learning!",
    "section": "Your Turn!",
    "text": "Your Turn!"
  },
  {
    "objectID": "slides-00-welcome.knit.html#create-a-github-account",
    "href": "slides-00-welcome.knit.html#create-a-github-account",
    "title": "Welcome to statistical learning!",
    "section": "Create a GitHub account",
    "text": "Create a GitHub account\n\nGo to https://github.com/, and create an account (unless you already have one). After you create your account, click here and enter your GitHub username.\n\nTips for creating a username from Happy Git with R.\n\nIncorporate your actual name!\nReuse your username from other contexts if you can.\nPick a username you will be comfortable revealing to your future boss.\nShorter is better than longer.\nBe as unique as possible in as few characters as possible.\nMake it timeless.\nAvoid words laden with special meaning in programming, like NA.\n\n\nRaise your hand if you have any questions."
  },
  {
    "objectID": "slides-00-welcome.knit.html#course-policies",
    "href": "slides-00-welcome.knit.html#course-policies",
    "title": "Welcome to statistical learning!",
    "section": "Course Policies",
    "text": "Course Policies"
  },
  {
    "objectID": "slides-00-welcome.html#class-meetings",
    "href": "slides-00-welcome.html#class-meetings",
    "title": "Welcome to statistical learning!",
    "section": "Class Meetings",
    "text": "Class Meetings\n\n\nLecture\n\nFocus on concepts behind statistical learning techniques\nInteractive lecture that includes examples and hands-on exercises\nBring fully-charged laptop to every lecture\n\nPlease let me know as soon as possible if you do not have access to a laptop\n\n\nLab\n\nTypically occurs on Fridays\nFocus on computing in R\nApply concepts from lecture to case study scenarios\n\nImplementation"
  },
  {
    "objectID": "slides-00-welcome.html#code",
    "href": "slides-00-welcome.html#code",
    "title": "Welcome to statistical learning!",
    "section": "Code",
    "text": "Code\n\nlibrary(tidyverse)"
  }
]